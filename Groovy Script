pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
        IMAGE_TAG = ""
    }

    stages {
        stage('CODE CHECKOUT') {
            steps {
                git branch: 'main', url: 'https://github.com/sameerbehera10/Ekart.git'
            }
        }
        
        stage('COMPILE') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('UNIT TEST') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('SONAR ANALYSIS') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=EKART -Dsonar.projectName=EKART \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Owasp Dependency Check') {
            steps {
                dependencyCheck additionalArguments: ' ---scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('CODE BUILD') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Deply To Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                     IMAGE_TAG = "${env.BUILD_NUMBER}"
                     withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t sameerbehera/ekart:${IMAGE_TAG} -f docker/Dockerfile ."
                     }
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                       sh "trivy image sameerbehera/ekart:${IMAGE_TAG} > trivy-report.txt"
            }
        }
        
        stage('Docker Push Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker push sameerbehera/ekart:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Kubernetes Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.46.47:6443') {
                    sh "kubectl apply -f deploymentservice.yml -n webapps"
                    sh "kubectl get svc -n webapps "
                }
            }
        }
        
    }
}
